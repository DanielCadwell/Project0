public class Project0 {
	public static Integer nFibonacci( Integer n ){
        List<Integer> fibo = new List<Integer>{1, 1}; //initialize first two numbers
        for(Integer i = 2; i < 100; i++){
            Integer nextFiboNum = fibo[i-1] + fibo[i-2]; //sum of previous two numbers
            fibo.add(nextFiboNum); //Add the new number into sequence
        }
        System.debug(fibo[n]); //10th number's index is 9
        return fibo[n];
  }
    
    
    
    public static Integer[] sortArray( Integer[] intList ) {
    //Test case: Project0.sortArray( new List<Integer>{2,4,5,1,3,1} );
    
	for(Integer i = 0 ; i < intList.size() ; i ++) {
	for(integer j = i+1 ; j <= intList.size() -1 ; j ++ ){
	  integer x = 0 ; // initiate my variable and start the sort through my if statement
	  if(intList[i] >  intList[j]){
	   x = intList[i]  ;
	   intList[i] = intList[j]  ;
	   intList[j]  = x;
	   system.debug(intList) ; // Print my results
	  }    
	}
  }
  system.debug(intList);
  return intList;
}

	public static Integer nFactorial( Integer n) {

    Integer ans = 1;
    if (n < 0) {
        System.debug('No negative numbers');
    }
    else
    {
    for (Integer i = 1; i <= n; i++) {
        ans *= i;
    }
    System.debug(ans);    
  }
  Return ans;      
 
 }
    
       public static Integer[] rotateLeftNTimes( Integer[] Myarray, Integer n){
        integer size = Myarray.size();
        n = Math.mod(n, size);
        for(Integer i = 0; i < n; i++){
            Integer holder0 = Myarray[i];
            Myarray[i] = Myarray[(i + 1)];
            for(integer j = size-1; j > i; j--){
                integer mover = Myarray[j];
                Myarray[j] = holder0;
                holder0 = mover;
            }
        }
        return Myarray;
    }
    
        public static Boolean bracketsAreBalanced(String s){
        List<String> stringlist = s.split('');
        Integer i = 0;
        if ( Math.mod(stringlist.size(), 2) == 1){
            return False;
        }
        while(i < s.length()){
            string first = s.substring(0,1);
            string last = s.substring(s.length()- 1);
            s = s.substring(1,s.length()-1);
            if(first == '[' && last == ']'){
                bracketsAreBalanced(s);
            }
            else if(first == '{' && last == '}'){
                bracketsAreBalanced(s);
            }
            else if(first == '(' && last == ')'){
                bracketsAreBalanced(s);
            }
            else{
                return false;
            }
        }
        return true;
    }
    
    public static void updateAccountSize() {
        List<Account> companies = new List<Account>();
        for(Account a : [SELECT id, size__c, NumberOfEmployees FROM Account]){
            if(a.NumberOfEmployees >= 0 && a.NumberOfEmployees <= 1000){
                a.size__c = 'Small';  
            }
            else if(a.NumberOfEmployees > 1000 && a.NumberOfEmployees <= 10000){
                a.size__c = 'Medium';
            }
            else if(a.NumberOfEmployees > 10000){
                a.size__c = 'Large';
            }
           companies.add(a);
        } 
        database.update(companies);
    }

	    public static void UpdateCALeads() {
        List<Lead> companies = new List<Lead>();
        for(Lead a : [SELECT id,State,Status FROM Lead]){
            if(a.State == 'CA'){
                a.Status = 'Closed - Not Converted';  
            }
            companies.add(a);
        } 
        database.update(companies);
    }
    
     public static void closePastDueOpportunities(){
        List<Opportunity> OPsClosed = new List<Opportunity>();
        for(Opportunity a:[SELECT Id, StageName, CloseDate FROM Opportunity WHERE StageName != 'Closed Won']){
            if(a.CloseDate < date.today()){
                    a.StageName = 'Closed Lost';
                    OPsClosed.add(a);
            }
        }
        update(OPsClosed);
    }
 
}